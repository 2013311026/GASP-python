# YAML input file for Python GASP

# defines the composition or region of composition space to search, as a list of dictionaries of element symbol - amount pairs. Each dictionary is a composition
# after parsing this, we need to have some sort of check to make sure the endpoints are valid
# also, based on this, determine whether we are doing a phase diagram search or not (so we know which objective funtion to use)
CompositionSpace:
    # - C: 2
    #   Si: 1

    # - C: 1
    #   Si: 2
    
      - Al: 1 

      - Cu: 1 



# says which energy code to use, and where the needed input files are. NOT optional
EnergyCode: # should only have one specified

     gulp: # TODO: the input files needed for gulp
          header_file: /n/srv/brevard/testing/gulp_testing/header_file  # the path to the header filr
          potential_file: /n/srv/brevard/testing/gulp_testing/potential_file  # the path to the potential file
#
#	vasp:
#		incar: path to incar file
#		kpoints: path to kpoints file
#		potcars: # one for each element
#			C: path to C potcar file
#			Si: path to Si potcar file

#	lammps: # TODO: the input files needed for lammps


ObjectiveFunction: # <epa|pd> This flag is optional. If not set, the algorithm will infer the objective function based on the composition space (epa for fixed composition, pd for variable)



# the general constraints - entire  block is optional, and defaults will be used if it's omitted
Constraints: 
     min_num_atoms: 2
     max_num_atoms: 10
#     min_lattice_length: 0.5
#     max_lattice_length: 20
#     min_lattice_angle: 70
#     max_lattice_angle: 110
#     allow_endpoints: False  # only gets applied when doing phase diagram searches, and only after the initial population. It specifies whether the end point compositions are permitted after the initial population
                             # default is True for phase diagram searches (should it be?)
#     per_species_mids:   # should default to all possible pairs (from composition space)
#          C C: 1.0 
#          C Si: 1.0
#          Si Si: 3.0



# specifies the geometries of the structures to search for. Optional (assumes bulk geometry if none specified)
Geometry:
     shape: bulk # <bulk|sheet|wire|cluster> defaults to bulk
     max_size: 5  # a constraint on the size (in Angstroms, atom-to-atom), for non-bulk geometries. For sheet, it's the layer thickness, for wire and cluster, it's the diameter. Defaults to inf
     padding: 10   # the (actual - i.e. atom-to-atom) amount of vacuum padding to add around non-bulk geometries. Not used for bulk, and defaults to 10 angstroms for other geometries



#Niggli: True # whether to do Niggli cell reduction. Optional, and defaults to True. If used, handles other geometries (sheet, etc.)



#ScaleDensity: True # whether to scale the density before doing an energy calculation. If used, the density is set to the average of the densities of the organisms in the promotion set 
                   # Optional, and defaults to True. Density is only scaled for epa searches, regardless of whether this option is used or not in the input file


# The parameters to use for determining if two organisms are redundant. Entire block is optional and if not specified, does structural comparisons (with default tolerances), but no value comparisons
RedundancyGuard: 
     lattice_length_tol:   # fractional length tolerance (ltol argument of structure_matcher). Defaults to 0.1
     lattice_angle_tol:   # angle tolerance in degrees (angle_tol argument of structure_matcher). Defaults to 2
     site_tol:     # site tolerance - fraction of average free length per atom (stol argument of structure_matcher). Defaults to 0.1 	
     use_primitive_cell:   # whether the structure matching algorithm takes the primitive cells of the structures before trying to match (primitive_cell argument of structure_matcher). Defaults to True
     attempt_supercell:   # whether to check if structures are equivalent to supercells of each other, if they have different numbers of atoms. Defaults to True
     d_value:   # for checking redundancy based on value. Defaults to zero



# The parameters for making the initial population. The entire block is optional and if not specified, makes 30 or 40 random organisms for epa and pd searches, respectively. Will also scale volumes to weighted average of elemental volumes
#InitialPopulation:
#     random:
#          number: 10  # number of random structures to make
#          volume: default  # volume per atom to scale the random structures to (cubic Angstroms per atom) 
                     # <num|random|from_elemental_densities> num - the number of cubic Angstroms per atom to scale to
                     #                                       random - no volume scaling - the volume is just the result of the random lattice vectors and atoms
                     #                                       from_elemental_densities - scales the volume to the weighted average of the volumes per atom of the elemental solids. This is default behavior

#     from_files:
#          path_to_folder: /n/srv/brevard/testing/initial_structures/empty # path to directory containing the poscar files 
                                                                          # TODO: this should unpad the poscars if needed, so the user doesn't have to (or maybe that happens in the main loop prior to development)

     # TODO: maybe include other options, like getting structures from a database or something



NumCalcsAtOnce:  # the max number of energy calculations to submit at once. Optional, and defaults to 1 (serial)
     


RunTitle: test # the title of run. Optional


# when the algorithm should stop the search. Optional, and defaults to 500 energy calcs for epa and 1000 energy calcs for pd
StoppingCriteria:
     num_energy_calcs: 700  # integer, the number of energy calculations to do before stopping. 
     value_achieved: -3.5   # float, stop when a structure has been found with this or lower value
     found_structure: /n/srv/brevard/Downloads/1T.cif   # path to poscar or cif file, stop when this structure has been found (to within some tolerance)



#Pool:
#	size: # total number of organisms in the pool
#	num_promoted: # the number of organisms in the promotion set. For phase diagram searching, this is always the ones on the convex hull (i.e., this is ignored)





#Variations:

#	Mating:
#		fraction: 0.7  # the fraction of offspring created with this variation
#		thickness_mean: 0.5 # TODO: look up what exactly this is
#		thickness_sigma: 0.1 # TODO: same as above
#		major_shift_frac: 0.1 # TODO: same as above 
#		minor_shift_frac: 0.1 # TODO: same as above
#		grow_parents: True # TODO: same as above
#		doubling_prob: 0.2 # probability of doubling one of the parent structures prior to mating

#	Mutation:
#		fraction: 0.1 # the fraction of offspring organisms created with this variation
#		frac_perturbed: 0.5 # the fraction of atoms in the cell that are perturbed
#		sigma_atoms: 0.5 # the standard deviation of atomic perturbations
#		sigma_lattice: 0.1 # TODO: something about the applied strain - look it up exactly

#	Permutation:
#		fraction: 0.1 # the fraction of offspring created with this variation
#		mean_swaps: 1 # average number of swaps to do per cell
#		sigma_swaps: 1 # the standard deviation of the number of swaps to do per cell
#		pairs_to_swap: # which pairs of atomic species to allow swapping 
#			Si: C # for example...	

#	NumStoichsMut:
#		fraction: 0.1 # the fraction of offspring created with this variation
#		mean: 0 # mean number of stoichiometries worth of atoms added or removed
#		sigma: 1 # standard deviation of the number of stoichiometries worth of atoms added or removed

#Selection:
#	num_parents: 20 # this should default to pool_size
#	selection_power: 1 # this should default to 1



